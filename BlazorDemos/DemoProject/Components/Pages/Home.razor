@page "/{action?}"
@using IdentityModel.Client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (AuthState?.User?.Identity?.IsAuthenticated == true)
{
    <p>Naam: @(AuthState?.User.Claims.Single(x => x.Type == "name").Value)</p>

    <table>
        <thead>
        <tr>
            <th>Type</th>
            <th>Value</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var claim in AuthState.User.Claims)
        {
            <tr>
                <td>@claim.Type</td>
                <td>@claim.Value</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    public AuthenticationState? AuthState { get; set; }

    [Parameter] public string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (Action == "send")
        {
            Console.WriteLine("Sending!");
            var response = await Http.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest
            {
                Address = "https://localhost:5010/connect/token",
                ClientId = "m2m.client",
                ClientSecret = "511536EF-F270-4058-80CA-1C89C192F69A",
                Scope = "coursesapi"
            });

            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:5002/testje") };
            Console.WriteLine($"Access token: {response.AccessToken}");
            request.Headers.Add("Authorization", $"Bearer {response.AccessToken}");
            var apiResponse = await Http.SendAsync(request);
            var content = await apiResponse.Content.ReadAsStringAsync();

        }
    }
}