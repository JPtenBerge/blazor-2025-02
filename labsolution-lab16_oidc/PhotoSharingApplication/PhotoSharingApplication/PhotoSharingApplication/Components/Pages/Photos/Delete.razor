@page "/photos/delete/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using PhotoSharingApplication.Auth
@inject IPhotosService PhotosService
@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService

@attribute [Authorize]
<h3>Delete</h3>

@if (photo is null)
{
    <p>Photo not found</p>
} 
else
{
    <h3 class="text-danger">Are you sure you want to delete this?</h3>
    <div class="col">
        <PhotoCard Photo="photo"/>
        <EditForm FormName="PhotoDeleteForm" Model="photo" OnSubmit="DeletePhoto">
            <button type="submit" class="btn btn-danger">Delete</button>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "PhotoDeleteForm")]
    Photo? photo { get; set;}

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        photo ??= await PhotosService.GetPhotoByIdAsync(Id);
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            var authorizationResult = await AuthorizationService.AuthorizeAsync(authState.User, photo, PhotoSharingPolicies.PhotoOwnerPolicy);
            if (!authorizationResult.Succeeded)
            {
                NavigationManager.NavigateTo("access-denied");
            }
        }
    }

    async Task DeletePhoto()
    {
        if(photo is not null)
        {
            await PhotosService.DeletePhotoAsync(photo.Id);
            NavigationManager.NavigateTo("photos/all");
        }
    }
}
