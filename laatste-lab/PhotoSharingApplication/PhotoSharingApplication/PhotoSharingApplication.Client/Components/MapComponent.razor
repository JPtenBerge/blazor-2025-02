@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div id="@($"map-{Id}")" class="map"></div>
Lat: @(String.Format("{0:N2}", _latitude)) - Lon: @(String.Format("{0:N2}", _longitude))

@code {
    private IJSObjectReference? module;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public double Latitude { get; set; }
    [Parameter]
    public EventCallback<double> LatitudeChanged { get; set; }
    private double _latitude;

    [Parameter]
    public double Longitude { get; set; }
    [Parameter]
    public EventCallback<double> LongitudeChanged { get; set; }
    private double _longitude;

    [Parameter]
    public string Description { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import",
                "./Components/MapComponent.razor.js");

            DotNetObjectReference<MapComponent> objRef = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("showMap", objRef, Id, Latitude, Longitude, Description);
        }
    }

    [JSInvokable]
    public async ValueTask UpdateCoordinates(double latitude, double longitude)
    {
        _longitude = longitude;
        _latitude = latitude;
        await LongitudeChanged.InvokeAsync(longitude);
        await LatitudeChanged.InvokeAsync(latitude);
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
