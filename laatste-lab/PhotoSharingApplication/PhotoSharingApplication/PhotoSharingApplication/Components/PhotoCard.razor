@using Microsoft.AspNetCore.Authorization
@using PhotoSharingApplication.Auth
@inject IAuthorizationService AuthorizationService

@if(Photo is not null){
    <div class="card">
        <img src="@($"photoimage/{Photo.Id}")" class="card-img-top" alt="@Photo.Title">
        
        <div class="card-body">
            <h5 class="card-title">@Photo.Title</h5>
            <p class="card-text">@Photo.Description</p>
            <p class="card-text">@Photo.Id</p>
            <MapComponent Id="@Photo.Id" Latitude="@Photo.Latitude" Longitude="@Photo.Longitude" Description="@Photo.Title" @rendermode="InteractiveAuto" />
        </div>
        @if (ShowFooter)
        {
            <div class="card-footer">
                @if (ShowDetails)
                {
                    <NavLink href="@($"photos/details/{Photo.Id}")" class="card-link">Details</NavLink>
                }
                @if (ShowAddToFavorite)
                {
                    <AddToFavoritesComponent Id="@Photo.Id" @rendermode="InteractiveAuto" />
                }
                @if (_showUpdate)
                {
                    <NavLink href="@($"photos/edit/{Photo.Id}")" class="card-link">Update</NavLink>
                }
                @if (_showDelete)
                {
                    <NavLink href="@($"photos/delete/{Photo.Id}")" class="card-link">Delete</NavLink>
                }
            </div>
        }
    </div>
}
@code {
    [Parameter]
    public Photo Photo { get; set; } = default!;

    [Parameter]
    public bool ShowDetails { get; set; } = false;

    [Parameter]
    public bool ShowAddToFavorite { get; set; } = false;

    [Parameter]
    public bool ShowUpdate { get; set; } = false;
    private bool _showUpdate;

    [Parameter]
    public bool ShowDelete { get; set; } = false;
    private bool _showDelete;

    private bool ShowFooter => ShowDetails || ShowAddToFavorite || _showUpdate || _showDelete;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            var authorizationResult = await AuthorizationService.AuthorizeAsync(authState.User, Photo, PhotoSharingPolicies.PhotoOwnerPolicy);
            _showDelete = authorizationResult.Succeeded && ShowDelete;
            _showUpdate = authorizationResult.Succeeded && ShowDelete;
        }
    }

}
